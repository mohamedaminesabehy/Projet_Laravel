<?php

require __DIR__.'/vendor/autoload.php';

$app = require_once __DIR__.'/bootstrap/app.php';
$app->make(\Illuminate\Contracts\Console\Kernel::class)->bootstrap();

use App\Models\Book;
use App\Models\Review;
use App\Models\BookInsight;
use App\Models\User;

echo "=== TEST SUPPRESSION DYNAMIQUE DES BOOKINSIGHTS ===\n\n";

// 1. Trouver ou cr√©er un livre
$book = Book::first();
if (!$book) {
    echo "‚ùå Aucun livre trouv√©. Cr√©ez un livre d'abord.\n";
    exit;
}

echo "üìö Livre utilis√©: " . $book->title . " (ID: {$book->id})\n\n";

// 2. V√©rifier l'√©tat actuel
$reviewCount = $book->reviews()->count();
$analyzedCount = $book->reviews()->whereNotNull('analyzed_at')->count();
$hasInsight = BookInsight::where('book_id', $book->id)->exists();

echo "√âtat AVANT le test:\n";
echo "  - Total avis: $reviewCount\n";
echo "  - Avis analys√©s: $analyzedCount\n";
echo "  - BookInsight existe: " . ($hasInsight ? "‚úÖ OUI" : "‚ùå NON") . "\n\n";

// 3. Si pas assez d'avis, cr√©er des avis de test
$users = User::limit(5)->get();
if ($users->count() === 0) {
    echo "‚ùå Aucun utilisateur trouv√©.\n";
    exit;
}

// Cr√©er 3 avis analys√©s si n√©cessaire (avec des utilisateurs diff√©rents)
$userIndex = 0;
while ($analyzedCount < 3) {
    // Utiliser un utilisateur diff√©rent pour chaque avis
    $user = $users[$userIndex % $users->count()];
    
    // V√©rifier si cet utilisateur a d√©j√† un avis sur ce livre
    $existingReview = Review::where('book_id', $book->id)
        ->where('user_id', $user->id)
        ->first();
    
    if (!$existingReview) {
        $review = Review::create([
            'book_id' => $book->id,
            'user_id' => $user->id,
            'rating' => rand(3, 5),
            'comment' => 'Test review ' . ($analyzedCount + 1),
            'is_approved' => true,
            'analyzed_at' => now(),
            'sentiment_score' => 0.8,
            'sentiment_label' => 'positive',
        ]);
        $analyzedCount++;
        echo "‚úÖ Avis de test #{$analyzedCount} cr√©√© (ID: {$review->id}, User: {$user->id})\n";
    }
    
    $userIndex++;
    
    // √âviter une boucle infinie
    if ($userIndex > $users->count() * 3) {
        echo "‚ö†Ô∏è  Pas assez d'utilisateurs disponibles pour cr√©er 3 avis.\n";
        break;
    }
}

// 4. Cr√©er un BookInsight si n√©cessaire
if (!$hasInsight) {
    BookInsight::create([
        'book_id' => $book->id,
        'summary' => 'R√©sum√© de test g√©n√©r√©',
        'positive_aspects' => ['Test 1', 'Test 2'],
        'negative_aspects' => ['Test n√©gatif'],
        'average_sentiment' => 0.75,
        'total_reviews_analyzed' => $analyzedCount,
    ]);
    echo "‚úÖ BookInsight de test cr√©√©\n\n";
}

// 5. Rafra√Æchir l'√©tat
$book->refresh();
$reviewCount = $book->reviews()->count();
$analyzedCount = $book->reviews()->whereNotNull('analyzed_at')->count();
$hasInsight = BookInsight::where('book_id', $book->id)->exists();

echo "√âtat APR√àS pr√©paration:\n";
echo "  - Total avis: $reviewCount\n";
echo "  - Avis analys√©s: $analyzedCount\n";
echo "  - BookInsight existe: " . ($hasInsight ? "‚úÖ OUI" : "‚ùå NON") . "\n\n";

// 6. TEST: Supprimer les avis un par un jusqu'√† < 3
echo "=== D√âBUT DU TEST DE SUPPRESSION ===\n\n";

$reviews = $book->reviews()->whereNotNull('analyzed_at')->get();

foreach ($reviews as $index => $review) {
    $remainingBefore = $book->reviews()->whereNotNull('analyzed_at')->count();
    
    echo "üìå Suppression de l'avis ID: {$review->id}\n";
    echo "   Avis analys√©s AVANT suppression: $remainingBefore\n";
    
    // Supprimer l'avis (ceci devrait d√©clencher l'√©v√©nement deleted)
    $review->delete();
    
    // V√©rifier l'√©tat apr√®s
    $book->refresh();
    $remainingAfter = $book->reviews()->whereNotNull('analyzed_at')->count();
    $insightExists = BookInsight::where('book_id', $book->id)->exists();
    
    echo "   Avis analys√©s APR√àS suppression: $remainingAfter\n";
    echo "   BookInsight existe: " . ($insightExists ? "‚úÖ OUI" : "‚ùå NON") . "\n";
    
    // V√©rifier la logique
    if ($remainingAfter < 3 && $insightExists) {
        echo "   ‚ö†Ô∏è  PROBL√àME: BookInsight devrait √™tre supprim√©!\n";
    } elseif ($remainingAfter < 3 && !$insightExists) {
        echo "   ‚úÖ SUCC√àS: BookInsight supprim√© automatiquement!\n";
    }
    
    echo "\n";
    
    // Si on descend sous 3, arr√™ter
    if ($remainingAfter < 3) {
        echo "üéØ Test termin√©: Moins de 3 avis analys√©s atteint.\n";
        break;
    }
}

// 7. √âtat final
echo "\n=== √âTAT FINAL ===\n";
$finalReviews = $book->reviews()->whereNotNull('analyzed_at')->count();
$finalInsight = BookInsight::where('book_id', $book->id)->exists();

echo "Avis analys√©s restants: $finalReviews\n";
echo "BookInsight existe: " . ($finalInsight ? "‚úÖ OUI" : "‚ùå NON") . "\n\n";

if ($finalReviews < 3 && !$finalInsight) {
    echo "‚úÖ ‚úÖ ‚úÖ TEST R√âUSSI! La suppression automatique fonctionne correctement.\n";
} elseif ($finalReviews < 3 && $finalInsight) {
    echo "‚ùå ‚ùå ‚ùå TEST √âCHOU√â! Le BookInsight persiste alors qu'il devrait √™tre supprim√©.\n";
    echo "\n‚ö†Ô∏è  DIAGNOSTIC:\n";
    echo "Le code dans Review.php n'est peut-√™tre pas actif.\n";
    echo "V√©rifiez que le fichier app/Models/Review.php contient bien la m√©thode booted().\n";
} else {
    echo "‚ÑπÔ∏è  Test incomplet: Il reste $finalReviews avis analys√©s (>= 3).\n";
}
