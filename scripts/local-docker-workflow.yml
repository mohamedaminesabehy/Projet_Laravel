# Workflow Local Docker Desktop
# Ce fichier peut √™tre utilis√© avec act (https://github.com/nektos/act) pour ex√©cuter localement

name: Local Docker Desktop Workflow

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action √† ex√©cuter'
        required: true
        default: 'sync'
        type: choice
        options:
        - sync
        - pull
        - start
        - health
        - info
        - clean
      
      docker_hub_username:
        description: 'Nom d\'utilisateur Docker Hub'
        required: false
        default: 'yassineroube'

env:
  DOCKER_HUB_USERNAME: ${{ github.event.inputs.docker_hub_username || 'yassineroube' }}
  PROJECT_NAME: projet-laravel-yassineroube

jobs:
  docker-desktop-sync:
    runs-on: self-hosted # Pour ex√©cution locale
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: V√©rifier Docker Desktop
      run: |
        echo "üîç V√©rification de Docker Desktop..."
        docker --version
        docker info
        
    - name: Configurer les permissions du script
      run: |
        echo "üîß Configuration des permissions..."
        Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser -Force
      shell: pwsh
      
    - name: Ex√©cuter la synchronisation Docker Desktop
      run: |
        echo "üöÄ Ex√©cution de la synchronisation..."
        .\scripts\docker-desktop-sync.ps1 -Action ${{ github.event.inputs.action || 'sync' }} -Verbose
      shell: pwsh
      
    - name: V√©rifier les conteneurs
      run: |
        echo "üìä V√©rification des conteneurs..."
        docker ps -a
        docker images
      shell: pwsh
      
    - name: Afficher les URLs des services
      run: |
        echo "üåê Services accessibles:"
        echo "  ‚Ä¢ Application Laravel: http://localhost:8080"
        echo "  ‚Ä¢ Prometheus: http://localhost:9090"
        echo "  ‚Ä¢ Grafana: http://localhost:3000 (admin/admin123)"
        echo "  ‚Ä¢ MailHog: http://localhost:8025"
        echo "  ‚Ä¢ Node Exporter: http://localhost:9100"
      shell: pwsh

  health-check:
    needs: docker-desktop-sync
    runs-on: self-hosted
    if: github.event.inputs.action == 'sync' || github.event.inputs.action == 'start'
    
    steps:
    - name: Attendre le d√©marrage des services
      run: |
        echo "‚è≥ Attente du d√©marrage des services..."
        Start-Sleep -Seconds 30
      shell: pwsh
      
    - name: Test de sant√© Laravel
      run: |
        try {
          $response = Invoke-WebRequest -Uri "http://localhost:8080" -TimeoutSec 10 -UseBasicParsing
          if ($response.StatusCode -eq 200) {
            Write-Host "‚úÖ Laravel App est accessible" -ForegroundColor Green
          }
        } catch {
          Write-Host "‚ö†Ô∏è Laravel App n'est pas encore pr√™t" -ForegroundColor Yellow
        }
      shell: pwsh
      
    - name: Test de sant√© Prometheus
      run: |
        try {
          $response = Invoke-WebRequest -Uri "http://localhost:9090/-/healthy" -TimeoutSec 10 -UseBasicParsing
          if ($response.StatusCode -eq 200) {
            Write-Host "‚úÖ Prometheus est accessible" -ForegroundColor Green
          }
        } catch {
          Write-Host "‚ö†Ô∏è Prometheus n'est pas encore pr√™t" -ForegroundColor Yellow
        }
      shell: pwsh
      
    - name: Test de sant√© Grafana
      run: |
        try {
          $response = Invoke-WebRequest -Uri "http://localhost:3000/api/health" -TimeoutSec 10 -UseBasicParsing
          if ($response.StatusCode -eq 200) {
            Write-Host "‚úÖ Grafana est accessible" -ForegroundColor Green
          }
        } catch {
          Write-Host "‚ö†Ô∏è Grafana n'est pas encore pr√™t" -ForegroundColor Yellow
        }
      shell: pwsh

  monitoring-setup:
    needs: health-check
    runs-on: self-hosted
    if: github.event.inputs.action == 'sync'
    
    steps:
    - name: Configurer Grafana
      run: |
        echo "üìä Configuration de Grafana..."
        # Attendre que Grafana soit compl√®tement pr√™t
        Start-Sleep -Seconds 10
        
        # Importer les dashboards personnalis√©s
        echo "üìà Import des dashboards personnalis√©s..."
        # Les dashboards sont automatiquement provisionn√©s via les fichiers de configuration
        
        Write-Host "‚úÖ Configuration de monitoring termin√©e" -ForegroundColor Green
      shell: pwsh
      
    - name: Afficher le r√©sum√© final
      run: |
        echo ""
        echo "üéâ =================================="
        echo "üéâ SYNCHRONISATION TERMIN√âE AVEC SUCC√àS!"
        echo "üéâ =================================="
        echo ""
        echo "üì± Vos conteneurs sont maintenant visibles dans Docker Desktop"
        echo ""
        echo "üåê Services accessibles:"
        echo "  ‚Ä¢ Application Laravel: http://localhost:8080"
        echo "  ‚Ä¢ Prometheus: http://localhost:9090"
        echo "  ‚Ä¢ Grafana: http://localhost:3000"
        echo "    - Utilisateur: admin"
        echo "    - Mot de passe: admin123"
        echo "  ‚Ä¢ MailHog: http://localhost:8025"
        echo "  ‚Ä¢ Node Exporter: http://localhost:9100"
        echo ""
        echo "üìä Pour voir les m√©triques:"
        echo "  1. Ouvrez Grafana (http://localhost:3000)"
        echo "  2. Connectez-vous avec admin/admin123"
        echo "  3. Allez dans Dashboards > Laravel Monitoring"
        echo ""
        echo "üê≥ Commandes utiles:"
        echo "  ‚Ä¢ Voir les conteneurs: docker ps"
        echo "  ‚Ä¢ Voir les logs: docker compose logs -f"
        echo "  ‚Ä¢ Arr√™ter: docker compose down"
        echo "  ‚Ä¢ Red√©marrer: docker compose up -d"
      shell: pwsh